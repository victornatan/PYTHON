# ################################### CRIAÇÃO DAS JANELAS DE EXIBIÇÃO DOS RESULTADOS ###################################

def criar_janela_exibicao_funcionario(dados):
    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Visualização')
    janelaexibicao.geometry('800x400')

    def exibir_dados_no_treeview(filtro_cpf=None):
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        dados_filtrados = []

        for resultado in dados:
            valores = resultado.split(', ')
            if filtro_cpf is None or filtro_cpf == valores[3]:  # Índice 3 é o campo CPF
                treeview.insert('', 'end', values=valores)
                dados_filtrados.append(resultado)

        if not dados_filtrados:
            label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados

    # Caixa de entrada (Entry) para o CPF
    entry_cpf1 = tk.Entry(janelaexibicao, width=15)
    entry_cpf1.pack(side='top', pady=10)

    # Botão para acionar a filtragem por CPF
    button_filtrar = tk.Button(janelaexibicao, text='Filtrar por CPF', bg='black', fg='white', bd=3, font=('Arial', 8, 'bold'), command=lambda: exibir_dados_no_treeview(entry_cpf1.get()))
    button_filtrar.pack(side='top', padx=10)

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM FUNCIONARIO')
    total_funcionario = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de funcionários
    label_total_funcionario = tk.Label(janelaexibicao, text=f'Total de Funcionários: {total_funcionario}', font=('Arial', 12, 'bold'))
    label_total_funcionario.pack(side='top', padx=10, pady=5)

    # Cria o Treeview com as colunas
    colunas = ('ID FUNC', 'DATA ADMISSÃO', 'NOME', 'CPF', 'PIS', 'RUA', 'Nº', 'BAIRRO', 'CIDADE', 'UF', 'DDD', 'TEL', 'SEXO', 'ID CARGO', 'STATUS', 'SALÁRIO BRUTO', 'SALÁRIO BRUTO COMISSÃO')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [5, 30, 160, 65, 70, 100, 5, 45, 30, 5, 5, 43, 5, 5, 30, 50, 60]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    # Chama a função para exibir os dados no Treeview (sem filtro inicial)
    #exibir_dados_no_treeview() vamos retirar para que os dados todos nao venha aparecer tudo na tela, so quero os que eu filtrar
    janelaexibicao.mainloop()


# visualizaçao dos dados do cliente ###
def criar_janela_exibicao_cliente(resultados):

    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Visualização')
    janelaexibicao.geometry('1200x600')

    def filtrar_dados():
        termo = entry_filtro.get().strip().lower()
        dados_filtrados = [resultado for resultado in resultados if termo in resultado.lower()]
        exibir_dados_no_treeview(dados_filtrados)

    def exibir_dados_no_treeview(dados):
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        if not dados:
            messagebox.showwarning('Sem Dados', 'Não temos registro pelo campo buscado')
            return
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados
            for resultado in dados:
                treeview.insert('', 'end', values=resultado.split(', '))

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM CLIENTE')
    total_clientes = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de clientes
    label_total_clientes = tk.Label(janelaexibicao, text=f'Total de Clientes: {total_clientes}', font=('Arial', 12, 'bold'))
    label_total_clientes.pack(side='top', padx=10, pady=5)

    # Adiciona campo de filtro
    label_filtro = tk.Label(janelaexibicao, text='Filtrar por CPF/CNPJ:')
    label_filtro.pack(pady=5)

    entry_filtro = tk.Entry(janelaexibicao, width=20)
    entry_filtro.pack(pady=5)

    botao_filtrar = tk.Button(janelaexibicao, text='Filtrar', command=filtrar_dados, bg='blue', fg='white', bd=3)
    botao_filtrar.pack(pady=5)

    # Cria o Treeview com as colunas
    colunas = ('ID', 'Nome', 'Data de Nascimento', 'CPF', 'CNPJ', 'E-mail', 'Rua', 'Número', 'Bairro', 'Cidade', 'Estado', 'DDD', 'Telefone')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [40, 80, 80, 90, 90, 90, 80, 40, 70, 80, 50, 30, 80]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    janelaexibicao.mainloop()


def criar_janela_exibicao_cargo(dados):
    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Visualização de Cargos')
    janelaexibicao.geometry('600x300')

    def exibir_dados_no_treeview(filtro_nome=None):
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        dados_filtrados = []

        for resultado in dados:
            valores = resultado.split(', ')
            if filtro_nome is None or filtro_nome.lower() in valores[1].lower():  # Índice 1 é o campo CARGO
                treeview.insert('', 'end', values=valores)
                dados_filtrados.append(resultado)

        if not dados_filtrados:
            label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados

    # Caixa de entrada (Entry) para o nome
    entry_nome_filtro = tk.Entry(janelaexibicao, width=15)
    entry_nome_filtro.pack(side='top', pady=10)

    # Botão para acionar a filtragem por nome
    button_filtrar_nome = tk.Button(janelaexibicao, text='Filtrar por Nome', bg='black', fg='white', bd=3, font=('Arial', 8, 'bold'), command=lambda: exibir_dados_no_treeview(entry_nome_filtro.get()))
    button_filtrar_nome.pack(side='top', padx=10)

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM cargo')
    total_cargos = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de clientes
    label_total_cargos = tk.Label(janelaexibicao, text=f'Total de Cargos: {total_cargos}', font=('Arial', 12, 'bold'))
    label_total_cargos.pack(side='top', padx=10, pady=5)

    # Cria o Treeview com as colunas
    colunas = ('IDCARGO', 'CARGO')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [80, 80]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    # Chama a função para exibir os dados no Treeview (sem filtro inicial)
    exibir_dados_no_treeview()
    janelaexibicao.mainloop()


entry_nome_cargo = None


def criar_janela_exibicao_estado(dados):
    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Visualização')
    janelaexibicao.geometry('600x300')

    def exibir_dados_no_treeview():
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        for resultado in dados:
            treeview.insert('', 'end', values=resultado.split(', '))

        if not dados:
            label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM estado')
    total_estados = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de clientes
    label_total_estados = tk.Label(janelaexibicao, text=f'Total de Estados: {total_estados}', font=('Arial', 12, 'bold'))
    label_total_estados.pack(side='top', padx=10, pady=5)

    # Cria o Treeview com as colunas
    colunas = ('IDESTADO', 'UF')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [80, 80]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    # Chama a função para exibir os dados no Treeview
    exibir_dados_no_treeview()

    janelaexibicao.mainloop()


def criar_janela_exibicao_area(dados):
    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Visualização')
    janelaexibicao.geometry('600x300')

    def exibir_dados_no_treeview(filtro=None):
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        dados_filtrados = []

        for resultado in dados:
            valores = resultado.split(', ')
            id_vendedor, id_estado = map(int, valores)  # Converte para inteiros para comparação

            if filtro is None or str(filtro) in map(str, [id_vendedor, id_estado]):
                treeview.insert('', 'end', values=valores)
                dados_filtrados.append(resultado)

        if not dados_filtrados:
            label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados

    # Caixa de entrada (Entry) para o filtro
    entry_filtro = tk.Entry(janelaexibicao, width=10)
    entry_filtro.pack(side='top', pady=5)

    # Botão para acionar a filtragem
    button_filtrar = tk.Button(janelaexibicao, text='Filtrar Por:  (ID VENDEDOR/ID ESTADO)', bg='black', fg='white', bd=3, font=('Arial', 8, 'bold'), command=lambda: exibir_dados_no_treeview(entry_filtro.get()))
    button_filtrar.pack(side='top', pady=5)

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM AREA_DE_ATUACAO_VENDEDOR')
    total_area = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de áreas
    label_total_area = tk.Label(janelaexibicao, text=f'Total de Áreas: {total_area}', font=('Arial', 12, 'bold'))
    label_total_area.pack(side='top', padx=10, pady=5)

    # Cria o Treeview com as colunas
    colunas = ('ID VENDEDOR', 'ID FUNCIONÁRIO', 'ID ESTADO')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [60, 60, 60]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    # Chama a função para exibir os dados no Treeview (sem filtro inicial)
    exibir_dados_no_treeview()

    janelaexibicao.mainloop()


def criar_janela_exibicao_meta(dados):
    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Visualização')
    janelaexibicao.geometry('800x400')

    def exibir_dados_no_treeview(filtro_id_vendedor=None, filtro_data=None):
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        dados_filtrados = []

        for resultado in dados:
            valores = resultado.split(', ')
            id_vendedor, data = valores[1], valores[4]

            # Converte a data para o formato do banco
            data_banco = datetime.strptime(data, '%Y-%m-%d')

            # Converte a data do filtro para o mesmo formato
            filtro_data_banco = None
            if filtro_data:
                try:
                    # Ajusta o formato da data do calendário
                    filtro_data_banco = datetime.strptime(filtro_data, '%m/%d/%y')
                except ValueError:
                    # Tratamento de erro caso a conversão falhe
                    label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
                    return

            # Verifica se o resultado atende ao filtro de ID do vendedor
            filtro_id_vendedor = filtro_id_vendedor.lower() if filtro_id_vendedor else None
            id_vendedor_lower = id_vendedor.lower()
            if (filtro_id_vendedor is None or filtro_id_vendedor in id_vendedor_lower) and \
                    (filtro_data_banco is None or filtro_data_banco.date() == data_banco.date()):
                treeview.insert('', 'end', values=valores)
                dados_filtrados.append(resultado)

        if not dados_filtrados:
            label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados

    # Rótulo para indicar o campo de filtro por ID do vendedor
    label_id_vendedor = tk.Label(janelaexibicao, text='Filtrar Por ID do Vendedor:')
    label_id_vendedor.pack(side='top', pady=5)

    # Caixa de entrada para o filtro por ID do vendedor
    entry_filtro_id_vendedor = tk.Entry(janelaexibicao, width=10)
    entry_filtro_id_vendedor.pack(side='top', pady=5)

    # Caixa de entrada para o filtro por data (calendário)
    calendar_label = tk.Label(janelaexibicao, text='Filtrar Por Data:')
    calendar_label.pack(side='top', pady=5)

    # Widget de calendário
    entry_filtro_data = DateEntry(janelaexibicao, width=12, background='darkblue', foreground='white', borderwidth=2, date_pattern='mm/dd/yy')
    entry_filtro_data.pack(side='top', pady=5)

    # Botão para acionar a filtragem
    button_filtrar = tk.Button(janelaexibicao, text='Filtrar', bg='black', fg='white', bd=3, font=('Arial', 8, 'bold'), command=lambda: exibir_dados_no_treeview(entry_filtro_id_vendedor.get(), entry_filtro_data.get()))
    button_filtrar.pack(side='top', pady=5)

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM META_VENDEDOR')
    total_meta = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de clientes
    label_total_meta = tk.Label(janelaexibicao, text=f'Total de Metas: {total_meta}', font=('Arial', 12, 'bold'))
    label_total_meta.pack(side='top', padx=10, pady=5)

    # Cria o Treeview com as colunas
    colunas = ('ID META', 'ID VENDEDOR', 'VALOR META', 'ANDAMENTO', 'DATA FINAL META')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [80, 80, 80, 80, 80]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    # Chama a função para exibir os dados no Treeview
    exibir_dados_no_treeview()

    janelaexibicao.mainloop()


def criar_janela_exibicao_produto(dados):
    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Visualização')
    janelaexibicao.geometry('600x300')

    def exibir_dados_no_treeview(filtro=None):
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        dados_filtrados = []

        for resultado in dados:
            valores = resultado.split(', ')

            if filtro is None or str(filtro) == valores[0]: # PARA  PESQUISA EXATA. SE EU QUISER PARCIALMENTE in valores:
                treeview.insert('', 'end', values=valores)
                dados_filtrados.append(resultado)

        if not dados_filtrados:
            label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados

    # Caixa de entrada (Entry) para o filtro
    entry_filtro = tk.Entry(janelaexibicao, width=10)
    entry_filtro.pack(side='top', pady=5)

    # Botão para acionar a filtragem
    button_filtrar = tk.Button(janelaexibicao, text='Filtrar Por:  (ID PRODUTO)', bg='black', fg='white', bd=3, font=('Arial', 8, 'bold'), command=lambda: exibir_dados_no_treeview(entry_filtro.get()))
    button_filtrar.pack(side='top', pady=5)

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM PRODUTO')
    total_produto = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de áreas
    label_total_produto = tk.Label(janelaexibicao, text=f'Total de Produtos: {total_produto}', font=('Arial', 12, 'bold'))
    label_total_produto.pack(side='top', padx=10, pady=5)

    # Cria o Treeview com as colunas
    colunas = ('ID PRODUTO', 'NOME', 'DESCRIÇÃO', 'COR', 'TURBO', 'PORTAS', 'PREÇO')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [20, 60, 250, 20, 30, 30, 40]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    # Chama a função para exibir os dados no Treeview (sem filtro inicial)
    exibir_dados_no_treeview()

    janelaexibicao.mainloop()


def criar_janela_exibicao_fornecedor(dados):
    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Forncedores')
    janelaexibicao.geometry('600x300')

    def exibir_dados_no_treeview(filtro=None):
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        dados_filtrados = []

        for resultado in dados:
            valores = resultado.split(', ')

            if filtro is None or str(filtro) == valores[4]: # PARA  PESQUISA EXATA. SE EU QUISER PARCIALMENTE in valores: valores[4] é o indice da coluna que quero filtrar (cnpj)
                treeview.insert('', 'end', values=valores)
                dados_filtrados.append(resultado)

        if not dados_filtrados:
            label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados

    # Caixa de entrada (Entry) para o filtro
    entry_filtro = tk.Entry(janelaexibicao, width=10)
    entry_filtro.pack(side='top', pady=5)

    # Botão para acionar a filtragem
    button_filtrar = tk.Button(janelaexibicao, text='Filtrar Por:  (CNPJ)', bg='black', fg='white', bd=3, font=('Arial', 8, 'bold'), command=lambda: exibir_dados_no_treeview(entry_filtro.get()))
    button_filtrar.pack(side='top', pady=5)

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM FORNECEDOR')
    total_fornecedor = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de áreas
    label_total_fornecedor = tk.Label(janelaexibicao, text=f'Total de Fornecedor: {total_fornecedor}', font=('Arial', 12, 'bold'))
    label_total_fornecedor.pack(side='top', padx=10, pady=5)

    # Cria o Treeview com as colunas
    colunas = ('ID FORNECEDOR', 'DATA DE ENTRADA', 'NOME', 'TIPO DE MATERIAL', 'CNPJ', 'DDD', 'TELEFONE', 'E-MAIL', 'NUMERO', 'RUA', 'BAIRRO', 'CIDADE', 'ESTADO', 'SITUAÇÃO')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [20, 60, 30, 20, 30, 30, 40, 40, 30, 30, 40, 40, 30, 40]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    # Chama a função para exibir os dados no Treeview (sem filtro inicial)
    exibir_dados_no_treeview()

    janelaexibicao.mainloop()


def criar_janela_exibicao_estoque(dados):
    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Estoque de Material')
    janelaexibicao.geometry('1200x500')

    def exibir_dados_no_treeview(filtro=None):
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        dados_filtrados = []

        for resultado in dados:
            valores = resultado.split(', ')

            if filtro is None or str(filtro) == valores[0]: # PARA  PESQUISA EXATA. SE EU QUISER PARCIALMENTE in valores:
                treeview.insert('', 'end', values=valores)
                dados_filtrados.append(resultado)

        if not dados_filtrados:
            label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados

    # Caixa de entrada (Entry) para o filtro
    entry_filtro = tk.Entry(janelaexibicao, width=10)
    entry_filtro.pack(side='top', pady=5)

    # Botão para acionar a filtragem
    button_filtrar = tk.Button(janelaexibicao, text='Filtrar Por:  (ID PRODUTO)', bg='black', fg='white', bd=3, font=('Arial', 8, 'bold'), command=lambda: exibir_dados_no_treeview(entry_filtro.get()))
    button_filtrar.pack(side='top', pady=5)

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM ESTOQUE_DE_MATERIAL')
    total_estoque = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de áreas
    label_total_estoque = tk.Label(janelaexibicao, text=f'Total de Material Estoque: {total_estoque}', font=('Arial', 12, 'bold'))
    label_total_estoque.pack(side='top', padx=10, pady=5)

    # Cria o Treeview com as colunas
    colunas = ('ID ESTOQUE', 'DATA DE ENTRADA', 'ID FORNECEDOR', 'LOTE', 'NOME', 'TIPO', 'COR', 'TAMANHO', 'QUANTIDADE', 'DATA DE VALIDADE')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [20, 40, 20, 20, 150, 30, 40, 20, 60, 60]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    # Chama a função para exibir os dados no Treeview (sem filtro inicial)
    exibir_dados_no_treeview()

    janelaexibicao.mainloop()


def criar_janela_exibicao_pedido(dados):
    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Pedidos')
    janelaexibicao.geometry('1200x500')

    def exibir_dados_no_treeview(filtro=None):
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        dados_filtrados = []

        for resultado in dados:
            valores = resultado.split(', ')

            if filtro is None or str(filtro) == valores[0]:
                treeview.insert('', 'end', values=valores)
                dados_filtrados.append(resultado)

        if not dados_filtrados:
            label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados

    # Caixa de entrada (Entry) para o filtro
    entry_filtro = tk.Entry(janelaexibicao, width=10)
    entry_filtro.pack(side='top', pady=5)

    # Botão para acionar a filtragem
    button_filtrar = tk.Button(janelaexibicao, text='Filtrar Por:  (ID PEDIDO)', bg='black', fg='white', bd=3, font=('Arial', 8, 'bold'), command=lambda: exibir_dados_no_treeview(entry_filtro.get()))
    button_filtrar.pack(side='top', pady=5)

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM PEDIDO')
    total_pedido = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de áreas
    label_total_pedido = tk.Label(janelaexibicao, text=f'Total de Pedido: {total_pedido}', font=('Arial', 12, 'bold'))
    label_total_pedido.pack(side='top', padx=10, pady=5)

    # Cria o Treeview com as colunas
    colunas = ('ID PEDIDO', 'DATA DE EMISSÃO', 'ID CLIENTE', 'ID PRODUTO', 'ID VENDEDOR', 'QUANTIDADE', 'DATA DE ENTREGA', 'MODO DE PAGAMENTO', 'PARCELAS', 'PREÇO TOTAL')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [20, 70, 20, 20, 20, 30, 60, 60, 20, 60]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    janelaexibicao.mainloop()


def criar_janela_exibicao_material_consumo(dados):
    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Material')
    janelaexibicao.geometry('1200x500')

    def exibir_dados_no_treeview(filtro=None):
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        dados_filtrados = []

        for resultado in dados:
            valores = resultado.split(', ')

            if filtro is None or str(filtro) == valores[2]: # PARA  PESQUISA EXATA. SE EU QUISER PARCIALMENTE in valores:
                treeview.insert('', 'end', values=valores)
                dados_filtrados.append(resultado)

        total_material_filtro = len(dados_filtrados)
        label_total_material['text'] = f'Total de Material: {total_material}                     (Com Filtro: {total_material_filtro})'

        if not dados_filtrados:
            label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados

    # Caixa de entrada (Entry) para o filtro
    entry_filtro = tk.Entry(janelaexibicao, width=10)
    entry_filtro.pack(side='top', pady=5)

    # Botão para acionar a filtragem
    button_filtrar = tk.Button(janelaexibicao, text='Filtrar Por:  (ID PEDIDO)', bg='black', fg='white', bd=3, font=('Arial', 8, 'bold'), command=lambda: exibir_dados_no_treeview(entry_filtro.get()))
    button_filtrar.pack(side='top', pady=5)

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM MATERIAL_PRA_CONSUMO')
    total_material = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de áreas
    label_total_material = tk.Label(janelaexibicao, text=f'Total de Material: {total_material}', font=('Arial', 12, 'bold'))
    label_total_material.pack(side='top', padx=10, pady=5)

    # Cria o Treeview com as colunas
    colunas = ('ID MATERIAL', 'DATA DE SAÍDA', 'ID PEDIDO', 'ID ESTOQUE', 'QUANTIDADE')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [20, 80, 20, 20, 40]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    # Chama a função para exibir os dados no Treeview (sem filtro inicial)
    exibir_dados_no_treeview()

    janelaexibicao.mainloop()


def criar_janela_exibicao_fabricacao(dados):
    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Fabricação')
    janelaexibicao.geometry('1200x500')

    def exibir_dados_no_treeview(filtro=None):
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        dados_filtrados = []

        if filtro is not None:
            for resultado in dados:
                valores = resultado.split(', ')

                if str(filtro).upper() == valores[5].upper() or str(filtro).upper() == valores[14].upper():
                    # Para correspondência exata quando o filtro é definido para valores[5] ou valores[14]
                    valores_upper = [valor.upper() for valor in valores]
                    treeview.insert('', 'end', values=valores_upper)
                    dados_filtrados.append(resultado)

        total_fabri_filtro = len(dados_filtrados)
        label_total_fabricacao['text'] = f'Total de Produto em Fabricação: {total_fabricacao}                     (Com Filtro: {total_fabri_filtro})'

        if not dados_filtrados and filtro is not None:
            label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados

    # Caixa de entrada (Entry) para o filtro
    entry_filtro = tk.Entry(janelaexibicao, width=10)
    entry_filtro.pack(side='top', pady=5)

    # Botão para acionar a filtragem
    button_filtrar = tk.Button(janelaexibicao, text='Filtrar Por:  (ID PEDIDO/STATUS)', bg='black', fg='white', bd=3, font=('Arial', 8, 'bold'), command=lambda: exibir_dados_no_treeview(entry_filtro.get()))
    button_filtrar.pack(side='top', pady=5)

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM PRODUTO_EM_FABRICAÇAO')
    total_fabricacao = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de áreas
    label_total_fabricacao = tk.Label(janelaexibicao, text=f'Total de Produto em Fabricação: {total_fabricacao}', font=('Arial', 12, 'bold'))
    label_total_fabricacao.pack(side='top', padx=10, pady=5)

    # Cria o Treeview com as colunas
    colunas = ('ID FABRICAÇÃO', 'DATA', 'NOME', 'CPF', 'CNPJ', 'ID PEDIDO', 'ID VENDEDOR', 'QUANTIDADE', 'DATA ENTREGA', 'PRODUTO', 'TIPO', 'COR', 'TURBO', 'PORTAS', 'STATUS')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [10, 40, 110, 50, 70, 10, 10, 10, 50, 60, 60, 10, 5, 10, 40]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    # Chama a função para exibir os dados no Treeview (sem filtro inicial)
    exibir_dados_no_treeview()

    janelaexibicao.mainloop()


def criar_janela_exibicao_historico(dados):
    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Histórico')
    janelaexibicao.geometry('1200x500')

    def exibir_dados_no_treeview(filtro=None):
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        dados_filtrados = []

        if filtro is not None:
            for resultado in dados:
                valores = resultado.split(', ')

                if str(filtro).upper() == valores[1].upper():
                    valores_upper = [valor.upper() for valor in valores]
                    treeview.insert('', 'end', values=valores_upper)
                    dados_filtrados.append(resultado)

        total_historico_filtro = len(dados_filtrados)
        label_total_historico['text'] = f'Total de Histórico Meta: {total_historico}                     (Com Filtro: {total_historico_filtro})'

        if not dados_filtrados and filtro is not None:
            label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados

    # Caixa de entrada (Entry) para o filtro
    entry_filtro = tk.Entry(janelaexibicao, width=10)
    entry_filtro.pack(side='top', pady=5)

    # Botão para acionar a filtragem
    button_filtrar = tk.Button(janelaexibicao, text='Filtrar Por:  (ID VENDEDOR)', bg='black', fg='white', bd=3, font=('Arial', 8, 'bold'), command=lambda: exibir_dados_no_treeview(entry_filtro.get()))
    button_filtrar.pack(side='top', pady=5)

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM HISTORICO_META')
    total_historico = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de áreas
    label_total_historico = tk.Label(janelaexibicao, text=f'Total de Histórico Meta: {total_historico}', font=('Arial', 12, 'bold'))
    label_total_historico.pack(side='top', padx=10, pady=5)

    # Cria o Treeview com as colunas
    colunas = ('ID HISTORICO', 'ID VENDEDOR', 'VALOR META', 'ANDAMENTO', 'DATA FINAL META')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [60, 60, 60, 60, 60]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    # Chama a função para exibir os dados no Treeview (sem filtro inicial)
    exibir_dados_no_treeview()

    janelaexibicao.mainloop()


def criar_janela_exibicao_folha(dados):
    # Cria a janela
    janelaexibicao = tk.Tk()
    janelaexibicao.title('Folha de Pagamento')
    janelaexibicao.geometry('800x400')

    def exibir_dados_no_treeview(filtro_id_vendedor=None, filtro_data=None):
        treeview.delete(*treeview.get_children())  # Limpa os dados anteriores
        dados_filtrados = []

        for resultado in dados:
            valores = resultado.split(', ')
            id_vendedor, data = valores[3], valores[1]

            # Converte a data para o formato do banco
            data_banco = datetime.strptime(data, '%Y-%m-%d')

            # Converte a data do filtro para o mesmo formato
            filtro_data_banco = None
            if filtro_data:
                try:
                    # Ajusta o formato da data do calendário
                    filtro_data_banco = datetime.strptime(filtro_data, '%m/%d/%y')
                except ValueError:
                    # Tratamento de erro caso a conversão falhe
                    label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
                    return

            # Verifica se o resultado atende ao filtro de ID do vendedor
            filtro_id_vendedor = filtro_id_vendedor.lower() if filtro_id_vendedor else None
            id_vendedor_lower = id_vendedor.lower()
            if (filtro_id_vendedor is None or filtro_id_vendedor in id_vendedor_lower) and \
                    (filtro_data_banco is None or filtro_data_banco.date() == data_banco.date()):
                treeview.insert('', 'end', values=valores)
                dados_filtrados.append(resultado)

        # Após o loop, atualize o rótulo do total para refletir o total após o filtro
        total_meta_filtro = len(dados_filtrados)
        label_total_meta['text'] = f'Total de Folhas: {total_meta}                     (Com Filtro: {total_meta_filtro})'

        if not dados_filtrados:
            label_sem_resultados.pack(side='top', padx=10, pady=5, fill='both')
        else:
            label_sem_resultados.pack_forget()  # Esconde a mensagem se houver resultados

    # Rótulo para indicar o campo de filtro por ID do vendedor
    label_id_vendedor = tk.Label(janelaexibicao, text='Filtrar Por ID Funciónario:')
    label_id_vendedor.pack(side='top', pady=5)

    # Caixa de entrada para o filtro por ID do vendedor
    entry_filtro_id_vendedor = tk.Entry(janelaexibicao, width=10)
    entry_filtro_id_vendedor.pack(side='top', pady=5)

    # Caixa de entrada para o filtro por data (calendário)
    calendar_label = tk.Label(janelaexibicao, text='Filtrar Por Data:')
    calendar_label.pack(side='top', pady=5)

    # Widget de calendário
    entry_filtro_data = DateEntry(janelaexibicao, width=12, background='darkblue', foreground='white', borderwidth=2,
                                  date_pattern='mm/dd/yy')
    entry_filtro_data.pack(side='top', pady=5)

    # Botão para acionar a filtragem
    button_filtrar = tk.Button(janelaexibicao, text='Filtrar', bg='black', fg='white', bd=3, font=('Arial', 8, 'bold'),
                               command=lambda: exibir_dados_no_treeview(entry_filtro_id_vendedor.get(),
                                                                        entry_filtro_data.get()))
    button_filtrar.pack(side='top', pady=5)

    # Realiza a consulta COUNT(*) antes de criar a janela
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM folha_de_pagamento')
    total_meta = cursor.fetchone()[0]

    # Adiciona rótulo para mostrar o total de clientes
    label_total_meta = tk.Label(janelaexibicao, text=f'Total de Folhas: {total_meta}', font=('Arial', 12, 'bold'))
    label_total_meta.pack(side='top', padx=10, pady=5)

    # Cria o Treeview com as colunas
    colunas = ('ID FOLHA', 'DATA DO PAGAMENTO', 'MÊS DE REFERÊNCIA', 'ID FUNCIONÁRIO', 'SALÁRIO BRUTO', 'INSS', 'SALÁRIO LIQUIDO')
    treeview = ttk.Treeview(janelaexibicao, columns=colunas, show='headings')

    # Configura as colunas com larguras menores
    larguras = [10, 60, 20, 10, 50, 10, 50]
    for coluna, largura in zip(colunas, larguras):
        treeview.heading(coluna, text=coluna)
        treeview.column(coluna, width=largura, anchor='center')

    # Adiciona o Treeview à janela
    treeview.pack(expand=True, fill='both')

    # Label para mostrar mensagem quando não houver resultados
    label_sem_resultados = tk.Label(janelaexibicao, text='', fg='red')

    janelaexibicao.mainloop()
